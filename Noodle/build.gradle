plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

group 'org.noodle'
version '1.0-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server
    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '11.0.2'

    //https://search.maven.org/artifact/org.postgresql/postgresql/42.2.20.jre7/jar
    implementation 'org.postgresql:postgresql:42.2.20.jre7'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

    // https://mvnrepository.com/artifact/org.danilopianini/gson-extras
    implementation group: 'org.danilopianini', name: 'gson-extras', version: '0.2.2'

    // https://mvnrepository.com/artifact/org.jbibtex/jbibtex
    implementation group: 'org.jbibtex', name: 'jbibtex', version: '1.0.12'

    // https://mvnrepository.com/artifact/javax.mail/mail
    implementation group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    implementation 'junit:junit:4.13.1'
    implementation 'commons-validator:commons-validator:1.4.1'
    implementation 'org.controlsfx:controlsfx:11.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    compile 'com.jfoenix:jfoenix:9.0.10'

    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"

}

javafx {
    version = "16"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

task(runServer, dependsOn: 'classes', type: JavaExec) {
    main = 'server.Launcher'
    classpath = sourceSets.main.runtimeClasspath
}

run{
    standardInput = System.in
}

//mainClassName = 'server.Launcher'
//jar {
//    manifest {
//        attributes 'Main-Class': 'server.Launcher'
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

mainClassName = 'client.Launcher'
jar {
    manifest {
        attributes 'Main-Class': 'client.JarLauncher'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


test {
    useJUnitPlatform()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/main/java/tests']
        }
    }
}
